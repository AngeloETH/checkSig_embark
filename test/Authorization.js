//const Authorization = artifacts.require('./Authorization.sol');

//const ECDSAMock = artifacts.require('Authorization');




const TEST_MESSAGE =  web3.sha3('Joyso');
const WRONG_MESSAGE = web3.sha3('Bitfinex');

const Authorization = embark.require('Authorization/contracts/Authorization');

//The following accounts generated by ganache
const signer = web3.eth.accounts[0];
const owner = web3.eth.accounts[5];
const user1 = web3.eth.accounts[2];
const user2 = web3.eth.accounts[4];

const sig = web3.eth.sign(signer,TEST_MESSAGE); //signature


describe("MDBService", function() {
    before(function(done) {
      this.timeout(0);
      EmbarkSpec.deployAll({}, done);
    });
    
    //Write your tests here
    
   })

/* contract('Authorization', function () {
    let authorization
    beforeEach('setup contract for each test', async function () {
        authorization = await Authorization.new()
    })

    it('register: owner verify signer (verified[owner][signer] = true)', async function(){
        authorization.register(signer, {from: owner});
        assert.equal(await authorization.getVerified(signer, {from: owner}),true);
        authorization.cancel(signer, {from: owner});
        assert.equal(await authorization.getVerified(signer, {from: owner}),false);
    })

    it('user1 => CheckSig(TEST_MESSAGE, v, r, s, owner) === true', async function(){
        authorization.register(signer, {from: owner});
        let r = '0x' + sig.slice(2,66);
        let s = '0x' + sig.slice(66,130);
        let v = parseInt(sig.slice(130,132))+27;
        assert.equal(await authorization.checkSig(TEST_MESSAGE, v, r, s, owner, {from: user1}),true);
    })

    it('user1 => CheckSig(WRONG_MESSAGE, v, r, s, owner) === false', async function(){
        authorization.register(signer, {from: owner});
        let r = '0x' + sig.slice(2,66);
        let s = '0x' + sig.slice(66,130);
        let v = parseInt(sig.slice(130,132))+27;
        assert.equal(await authorization.checkSig(WRONG_MESSAGE, v, r, s, owner, {from: user1}),false);
    })

    it('user2 => CheckSig(TEST_MESSAGE, v, r, s, owner) === true', async function(){
        authorization.register(signer, {from: owner});
        let r = '0x' + sig.slice(2,66);
        let s = '0x' + sig.slice(66,130);
        let v = parseInt(sig.slice(130,132))+27;
        assert.equal(await authorization.checkSig(TEST_MESSAGE, v, r, s, owner, {from: user2}),true);
    })

}) */

    
